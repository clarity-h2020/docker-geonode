version: '3'
     
services:

  db:
    image: geonode/postgis:9.6
    restart: unless-stopped
    container_name: ${COMPOSE_PROJECT_NAME}-postgis
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: db
        org.geonode.instance.name: geonode
    volumes:
      - ${COMPOSE_PROJECT_NAME}_dbdata:/var/lib/postgresql/data
      - ${COMPOSE_PROJECT_NAME}_dbbackups:/pg_backups
    env_file:
      - ./scripts/docker/env/production/db.env
    ports:
      - "0.0.0.0:${POSTGRES_PORT:-5432}:5432"

  # elasticsearch:
  #   image: elasticsearch
  #   restart: unless-stopped
  #   container_name: elasticsearch4${COMPOSE_PROJECT_NAME}
  #   stdin_open: true
  #   # tty: true
  #   labels:
  #       org.geonode.component: elasticsearch
  #       org.geonode.instance.name: geonode

  rabbitmq:
    image: rabbitmq
    restart: unless-stopped
    container_name: ${COMPOSE_PROJECT_NAME}-rabbitmq
    stdin_open: true
    tty: true
    labels:
        org.geonode.component: rabbitmq
        org.geonode.instance.name: geonode

  celery:
    restart: unless-stopped
    image: geonode/geonode:latest
    container_name: ${COMPOSE_PROJECT_NAME}-celery
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: celery
        org.geonode.instance.name: geonode
    depends_on:
      - db
  #     - elasticsearch
      - rabbitmq
    command: celery worker --app=geonode.celery_app:app -B -l INFO
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - ./celery.env

  data-dir-conf:
    image: geonode/geoserver_data:latest
    restart: on-failure
    container_name: ${COMPOSE_PROJECT_NAME}-gsconf
    labels:
        org.geonode.component: conf
        org.geonode.instance.name: geonode
    command: /bin/true
    volumes:
      - ${COMPOSE_PROJECT_NAME}_gsdatadir:/geoserver_data/data

  geoserver:
    image: geonode/geoserver:latest
    restart: unless-stopped
    container_name: ${COMPOSE_PROJECT_NAME}-geoserver
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: geoserver
        org.geonode.instance.name: geonode
    depends_on:
      - db
      # - elasticsearch
      - rabbitmq
      - data-dir-conf
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    volumes_from:
      - data-dir-conf  
    env_file:
      - ./geoserver.env

  django:
    restart: unless-stopped
    image: geonode/geonode:latest
    container_name: ${COMPOSE_PROJECT_NAME}-django4
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: django
        org.geonode.instance.name: geonode
    depends_on:
      - db
      # - elasticsearch
      - rabbitmq
    # command: paver start_django -b 0.0.0.0:8000
    command: uwsgi --ini uwsgi.ini
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    volumes_from:
      - data-dir-conf  
    env_file:
      - ./django.env

  geonode:
    image: geonode/nginx:geoserver
    restart: unless-stopped
    container_name: ${COMPOSE_PROJECT_NAME}-nginx
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: nginx
        org.geonode.instance.name: geonode
    depends_on:
      - django
      - celery
      - geoserver
    ports:
      - "8088:80"

volumes:
  geoserver-data-dir:
    name: ${COMPOSE_PROJECT_NAME}_gsdatadir
    driver: local
  dbdata:
    name: ${COMPOSE_PROJECT_NAME}_dbdata
    driver: local
  dbbackups:
    name: ${COMPOSE_PROJECT_NAME}_dbbackups
    driver: local
    
networks:
  default:
    external:
      name: ${NETWORK:-clarity}
