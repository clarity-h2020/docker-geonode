version: '3.6'
     
services:

  db:
    image: geonode/postgis:9.6
    restart: unless-stopped
    container_name: ${COMPOSE_PROJECT_NAME}-postgis
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: db
        org.geonode.instance.name: geonode
    volumes:
      - type: volume
        source: dbdata
        target: /var/lib/postgresql/data
      - type: volume
        source: dbbackups
        target: /pg_backups
    env_file:
      - ./db.env
    ports:
      - "0.0.0.0:${POSTGRES_PORT:-5432}:5432"

  # elasticsearch:
  #   image: elasticsearch
  #   restart: unless-stopped
  #   container_name: elasticsearch4${COMPOSE_PROJECT_NAME}
  #   stdin_open: true
  #   # tty: true
  #   labels:
  #       org.geonode.component: elasticsearch
  #       org.geonode.instance.name: geonode

  rabbitmq:
    image: rabbitmq
    restart: unless-stopped
    container_name: ${COMPOSE_PROJECT_NAME}-rabbitmq
    stdin_open: true
    tty: true
    labels:
        org.geonode.component: rabbitmq
        org.geonode.instance.name: geonode

  celery:
    restart: unless-stopped
    image: geonode/geonode:latest
    container_name: ${COMPOSE_PROJECT_NAME}-celery
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: celery
        org.geonode.instance.name: geonode
    depends_on:
      - db
  #     - elasticsearch
      - rabbitmq
    command: celery worker --app=geonode.celery_app:app -B -l INFO
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
    env_file:
      - ./celery.env

  data-dir-conf:
    image: geonode/geoserver_data:latest
    restart: on-failure
    container_name: ${COMPOSE_PROJECT_NAME}-gsconf
    labels:
        org.geonode.component: conf
        org.geonode.instance.name: geonode
    command: /bin/true
    volumes:
      - type: volume
        source: gsdata
        target: /geoserver_data/data

  geoserver:
    image: geonode/geoserver:latest
    restart: unless-stopped
    container_name: ${COMPOSE_PROJECT_NAME}-geoserver
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: geoserver
        org.geonode.instance.name: geonode
    depends_on:
      - db
      # - elasticsearch
      - rabbitmq
      - data-dir-conf
    volumes:
      - type: volume
        source: webapps
        target: /usr/local/tomcat/webapps
      - type: volume
        source: gsdata
        target: /geoserver_data/data
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
      - type: bind
        source: /data
        target: /geoserver_data/ext_data
    env_file:
      - ./geoserver.env
    environment:
        VIRTUAL_HOST: ${GEOSERVER_VIRTUAL_HOST}
        LETSENCRYPT_HOST: ${GEOSERVER_LETSENCRYPT_HOST}
        LETSENCRYPT_EMAIL: ${GEOSERVER_LETSENCRYPT_EMAIL}

  django:
    restart: unless-stopped
    image: geonode/geonode:latest
    container_name: ${COMPOSE_PROJECT_NAME}-django
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: django
        org.geonode.instance.name: geonode
    depends_on:
      - db
      # - elasticsearch
      - rabbitmq
    # command: paver start_django -b 0.0.0.0:8000
    command: uwsgi --ini uwsgi.ini
    volumes:
      - type: volume
        source: gsdata
        target: /geoserver_data/data
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
    env_file:
      - ./django.env

  geonode:
    image: geonode/nginx:geoserver
    restart: unless-stopped
    container_name: ${COMPOSE_PROJECT_NAME}-nginx
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: nginx
        org.geonode.instance.name: geonode
    depends_on:
      - django
      - celery
      - geoserver
    #ports:
    #  - "80:80"
    environment:
        VIRTUAL_HOST: ${GEONODE_VIRTUAL_HOST}
        LETSENCRYPT_HOST: ${GEONODE_LETSENCRYPT_HOST}
        LETSENCRYPT_EMAIL: ${GEONODE_LETSENCRYPT_EMAIL}

volumes:
  webapps:
    name: ${COMPOSE_PROJECT_NAME}_tomcat_webapps
    driver: local
  gsdata:
    name: ${COMPOSE_PROJECT_NAME}_gsdata
    driver: local
  dbdata:
    name: ${COMPOSE_PROJECT_NAME}_dbdata
    driver: local
  dbbackups:
    name: ${COMPOSE_PROJECT_NAME}_dbbackups
    driver: local
    
networks:
  default:
    external:
      name: ${NETWORK:-clarity}
